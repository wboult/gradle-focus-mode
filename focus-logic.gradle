// Focus mode logic - builds dependency graph and includes selected projects

// Build dependency graph
ext.depMap = [:]
ext.reverseDepMap = [:]

gradle.ext.projectDirs.each { proj, dir ->
    def file = new File(settingsDir, "${dir}/${proj}/build.gradle")
    if (file.exists()) {
        def content = file.text
        def matches = content =~ /focusedDep\(':(\w+):project-(\d+)'/
        matches.each { match ->
            def depCategory = match[1]
            def depNum = match[2].toInteger()
            def dep = String.format('project-%03d', depNum)
            if (!ext.depMap.containsKey(proj)) ext.depMap[proj] = []
            ext.depMap[proj] << dep
            if (!ext.reverseDepMap.containsKey(dep)) ext.reverseDepMap[dep] = []
            ext.reverseDepMap[dep] << proj
        }
    }
}

// Get transitive dependencies (upstream)
def getTransitiveDeps(String proj, Set visited = new HashSet()) {
    if (!visited.add(proj)) return []
    def deps = ext.depMap[proj] ?: []
    deps + deps.collectMany { getTransitiveDeps(it, visited) }
}

// Get dependents up to N hops (downstream)
def getDependents(String proj, int hops, Set visited = new HashSet()) {
    if (!visited.add(proj)) return []
    def result = [proj]
    if (hops > 0) {
        def dependents = ext.reverseDepMap[proj] ?: []
        result.addAll(dependents.collectMany { getDependents(it, hops-1, visited) })
    }
    result
}

// Compute included projects
def included = new HashSet()
if (ext.focusedProjects.isEmpty()) {
    // Include all projects when no focused projects are selected
    included.addAll(gradle.ext.allProjects.collect { it })
    logger.debug("Focus mode: No focused projects selected - including all projects by default")
} else {
    ext.focusedProjects.each { proj ->
        included.addAll(getDependents(proj, ext.downstreamHops))
    }
}

logger.debug("Focus mode: focused projects: ${ext.focusedProjects}")
logger.debug("Focus mode: included projects: $included")

// Store for IDEA exclusion
System.setProperty('focus.includedProjects', included.join(','))
logger.debug("Focus logic: set system property focus.includedProjects")

// Include only the computed projects
logger.debug("Focus logic: including projects: $included")
included.each { proj ->
    def dir = gradle.ext.projectDirs[proj]
    if (dir) {
        def projectPath = ":${dir}:${proj}"
        logger.debug("Including project: $projectPath")
        include projectPath
    }
}
